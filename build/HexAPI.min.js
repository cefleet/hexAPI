var HexAPI=function(){var a=function(a){return a=a||{},a.engine=b,new c(a)},b=function(){var a=function(a,b,c){return{q:a,r:b,s:c}},b=function(a,b){return{x:a,y:b}},c=function(b,c){return a(b.q+c.q,b.r+c.r,b.s+c.s)},d=function(b,c){return a(b.q*c,b.r*c,b.s*c)},e=function(a){return v[a]},f=function(a){return w[a]},g=function(a,b,c,d,e,f,g,h,i){return{f0:a,f1:b,f2:c,f3:d,b0:e,b1:f,b2:g,b3:h,start_angle:i}},h=function(b){var c=Math.trunc(Math.round(b.q)),d=Math.trunc(Math.round(b.r)),e=Math.trunc(Math.round(b.s)),f=Math.abs(c-b.q),g=Math.abs(d-b.r),h=Math.abs(e-b.s);return f>g&&f>h?c=-d-e:g>h?d=-c-e:e=-c-d,a(c,d,e)},i=function(a,c){var d=a.orientation,e=a.hexSize,f=2*Math.PI*(c+d.start_angle)/6;return b(e.x*Math.cos(f),e.y*Math.sin(f))},j=function(a,b){return(Math.abs(a.q-b.q)+Math.abs(a.q+a.r-b.q-b.r)+Math.abs(a.r-b.r))/2},k=function(a,b){return c(a,e(b))},m=function(a,b){var d=f(b);return c(a,d)},n=function(a,b,c){return c="pointy"==c?u.POINTY:u.FLAT,{orientation:c,hexSize:a,origin:b}},o=function(a,c){var d=a.orientation,e=a.hexSize,f=a.origin,g=(d.f0*c.q+d.f1*c.r)*e.x,h=(d.f2*c.q+d.f3*c.r)*e.y;return b(g+f.x,h+f.y)},p=function(a,c){for(var d=[],e=o(a,c),f=1;6>=f;f++){l=f,6===l&&(l=0);var g=i(a,f);d.push(b(e.x+g.x,e.y+g.y))}return d},q=function(c,d){var e=c.orientation,f=c.hexSize,g=c.origin,i=b((d.x-g.x)/f.x,(d.y-g.y)/f.y),j=e.b0*i.x+e.b1*i.y,k=e.b2*i.x+e.b3*i.y,l=a(j,k,-j-k);return h(l)},r=function(a,b){for(var c=[{q:a.q,r:a.r,s:a.s}],d=1;b>=d;d++)for(var e=s(a,d),f=0;f<e.length;f++)c.push(e[f]);return c},s=function(a,b){for(var f=[],g=c(a,d(e(4),b)),h=0;6>h;h++)for(var i=0;b>i;i++)f.push(g),g=k(g,h);return f},t=function(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p=!1;return c=a[0].x,d=a[0].y,e=a[1].x,f=a[1].y,g=b[0].x,h=b[0].y,i=b[1].x,j=b[1].y,k=(j-h)*(e-c)-(i-g)*(f-d),0===k?p:(l=d-h,m=c-g,n=(i-g)*l-(j-h)*m,o=(e-c)*l-(f-d)*m,l=n/k,m=o/k,l>0&&1>l&&m>0&&1>m&&(p=!0),p)},u={POINTY:g(Math.sqrt(3),Math.sqrt(3)/2,0,1.5,Math.sqrt(3)/3,-1/3,0,2/3,.5),FLAT:g(1.5,0,Math.sqrt(3)/2,Math.sqrt(3),2/3,0,-1/3,Math.sqrt(3)/3,0)},v=[a(1,0,-1),a(1,-1,0),a(0,-1,1,!0),a(-1,0,1),a(-1,1,0),a(0,1,-1)],w=[a(2,-1,-1),a(1,-2,1),a(-1,-1,2),a(-2,1,1),a(-1,2,-1),a(1,1,-2)],x={distanceBetween:j,neighborAtDirection:k,neighborsAtDiagonal:m,createLayout:n,centerOfHex:o,cornersOfHex:p,hexAtPoint:q,getHexesWithinDistance:r,getHexesAtDistance:s,checkIfLinesIntersect:t};return x}(),c=function(a){this._init(a)};c.prototype={_init:function(a){this.engine=a.engine,a=a||{},this.hexSize=a.hexSize||{x:30,y:30},this.origion=a.origion||{x:0,y:0},this.orientation=a.orientation||"pointy",this.layout=this.engine.createLayout(this.hexSize,this.origion,this.orientation),this.rows=a.rows||30,this.cols=a.cols||20,this._createMap()},getHexList:function(){return Object.keys(this.map)},getHexAtPoint:function(a){return this.engine.hexAtPoint(this.layout,a)},_createMap:function(){this.map={};"pointy"==this.orientation?this._makePointyMap():this._makeFlatMap()},_makePointyMap:function(){for(r=0;r<this.rows;r++){var a=Math.floor(r/2);for(q=-a;q<this.cols-a;q++){var b=new HexAPI.Hex({q:q,r:r,s:-q-r,grid:this});this.map[b.id]=b}}},_makeFlatMap:function(){for(q=0;q<this.cols;q++){var a=Math.floor(q/2);for(r=-a;r<this.rows-a;r++){var b=new HexAPI.Hex({q:q,r:r,s:-q-r,grid:this});this.map[b.id]=b}}}};var d=function(a){this._init(a)};return d.prototype={_init:function(a){this.grid=a.grid,this.engine=this.grid.engine,a=a||{},this.q=a.q||0,this.r=a.r||0,this.s=a.s||0,this.id=this.q+"."+this.r+"."+this.s,this._setCenter(),this._setCorners(),this._setEdges(),this._setNeighbors(),this._setDiagonalNeighbors()},getNeighborAt:function(a){return this.neighbors[a]},getDistanceTo:function(a){return this.engine.distanceBetween(this,a)},getHexesWithinDistance:function(a){return this.engine.getHexesWithinDistance(this,a)},getHexesAtDistance:function(a){return this.engine.getHexesAtDistance(this,a)},makeHexLineTo:function(a){return this.engine._defineLineBetweenHexes(this,a)},makeStraightLineTo:function(a){return a?[this.centerPoint,a.centerPoint]:!1},getPathTo:function(a,b,c){for(var d=this._aStarGetPathTo(a,b,c),e=[],f=0;f<d.length;f++)e.push(this.grid.map[d[f].id]);return e},_aStarGetPathTo:function(a,b,c){var d;this._astarGridSetup(b,a);var e=this._aStarGrid;for(d=0;d<e.length;d++)e[d].id===this.id&&(start=e[d]),e[d].id===a.id&&(end=e[d]);var f=[];f.push(start);for(this._astarHeuristic;f.length>0;){var g=0;for(d=0;d<f.length;d++)f[d].f<f[g].f&&(g=d);var h=f[g];if(h==end){for(var i=h,j=[];i.parent;)j.push(i),i=i.parent;return j.reverse()}for(f.splice(g,1),h.closed=!0,d=0;d<h.neighbors.length;d++){var k=this._getAstarGridItemFromId(h.neighbors[d]);if(k&&!k.closed&&!k.isObstacle){var l=h.g+1,m=!1;k.visited?l<k.g&&(m=!0):(m=!0,k.h=this._astarHeuristic(k,end),k.visited=!0,f.push(k)),m&&(k.parent=h,k.g=l,k.f=k.g+k.h,k.debug="F: "+k.f+"<br />G: "+k.g+"<br />H: "+k.h)}}}return[]},_getAstarGridItemFromId:function(a){for(var b=0;b<this._aStarGrid.length;b++)if(this._aStarGrid[b].id===a)return this._aStarGrid[b]},_astarGridSetup:function(a,b){var c=[];for(var d in this.grid.map){var e=this._astartGridifyFromId(d);if(a)for(var f=0;f<a.length;f++){var g=a[f].q+"."+a[f].r+"."+a[f].s;g===e.id&&b.id!==e.id&&(e.isObstacle=!0)}c.push(e)}this._aStarGrid=c},_astartGridifyFromId:function(a){var b={};return b.id=a,b.neighbors=this.grid.map[a].neighbors,b.q=this.grid.map[a].q,b.r=this.grid.map[a].r,b.s=this.grid.map[a].s,b.f=0,b.g=0,b.h=0,b.debug="",b.parent=null,b.isObstacle=!1,b},_astarHeuristic:function(a,b){return this.engine.distanceBetween(a,b)},_setCorners:function(){this.corners=this.engine.cornersOfHex(this.grid.layout,this)},_setEdges:function(){this.edges=[],this.edges.push([this.corners[5],this.corners[0]]);for(var a=4;a>=0;a--){var b=a+1;this.edges.push([this.corners[b],this.corners[a]])}},_setCenter:function(){this.centerPoint=this.engine.centerOfHex(this.grid.layout,this)},_setNeighbors:function(){this.neighbors=[];for(var a=0;6>a;a++){var b=this.engine.neighborAtDirection(this,a);this.neighbors.push(b.q+"."+b.r+"."+b.s)}},_setDiagonalNeighbors:function(){this.diagonalNeighbors=[];for(var a=0;6>a;a++){var b=this.engine.neighborsAtDiagonal(this,a);this.diagonalNeighbors.push(b.q+"."+b.r+"."+b.s)}},_checkIfLineCrosses:function(a){for(var b=!1,c=0;c<this.edges.length;c++)if(this.edges[c]&&this.engine.checkIfLinesIntersect(a,this.edges[c])){b=!0;break}return b}},{setup:a,Engine:b,Grid:c,Hex:d}}();